{"version":3,"sources":["getPercentage.js","getQuarter.js","App.js","initializeReactGA.js","serviceWorker.js","index.js"],"names":["getPercentage","args","undefined","Error","end","moment","start","elapsed","today","diff","total","Math","round","getQuarter","input","first","last","text","now","month","year","format","endOf","App","Date","quarter","model","percentage","yearPercentage","yearQuarter","className","data-version","version","color","completed","height","initializeReactGA","process","NODE_ENV","REACT_APP_GA_TRACKING_ID","ReactGA","initialize","pageview","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gTAiBeA,MAff,SAAuBC,GACrB,QAAaC,IAATD,EACF,MAAM,IAAIE,MAAM,gCAGlB,IAAMC,EAAMC,IAAOJ,EAAKG,KAClBE,EAAQD,IAAOJ,EAAKK,OAGpBC,EAFQF,IAAOJ,EAAKO,OAEJC,KAAKH,EAAO,QAC5BI,EAAQN,EAAIK,KAAKH,EAAO,QAE9B,OAAOK,KAAKC,MAAOL,EAAUG,EAAS,MCmCzBG,MA/Cf,SAAoBC,GAClB,IAIIC,EACAC,EACAC,EANEC,EAAMb,IAAOS,GACbK,EAAQD,EAAIC,QACZC,EAAOF,EAAIE,OAKjB,OAAQD,GACN,KAAK,EACL,KAAK,EACL,KAAK,EACHJ,EAAQ,KACRC,EAAO,KACPC,EAAO,KACP,MACF,KAAK,EACL,KAAK,EACL,KAAK,EACHF,EAAQ,KACRC,EAAO,KACPC,EAAO,KACP,MACF,KAAK,EACL,KAAK,EACL,KAAK,EACHF,EAAQ,KACRC,EAAO,KACPC,EAAO,KACP,MACF,QACEF,EAAQ,KACRC,EAAO,KACPC,EAAO,KAWX,MAPgB,CACdF,MAAOV,IAAO,GAAD,OAAIe,EAAJ,YAAYL,EAAZ,QAAwBM,OAAO,cAC5CL,KAAMX,IAAO,GAAD,OAAIe,EAAJ,YAAYJ,EAAZ,QAAuBM,MAAM,SAASD,OAAO,cACzDJ,OACAG,SCQWG,MA5Cf,WACE,IAAML,EAAMM,KAAKN,MACXO,EAAUZ,EAAWK,GACrBQ,EAAQ,CACZC,WAAY3B,EAAc,CACxBI,IAAKqB,EAAQT,KACbV,MAAOmB,EAAQV,MACfP,MAAOU,IAETE,KAAMK,EAAQL,KACdQ,eAAgB5B,EAAc,CAC5BI,IAAI,GAAD,OAAKqB,EAAQL,KAAb,UACHd,MAAM,GAAD,OAAKmB,EAAQL,KAAb,UACLZ,MAAOU,IAETW,YAAa,2BAASJ,EAAQL,KAAjB,YAAyBK,EAAQR,QAGhD,OACE,yBAAKa,UAAU,MAAMC,eAAcC,KACjC,4CAAkBN,EAAMG,eACxB,2BACGH,EAAMG,cADT,OAC4BH,EAAMC,WADlC,eAGA,kBAAC,IAAD,CACEG,UAAU,WACVG,MAAM,SACNC,UAAWR,EAAMC,WACjBQ,OAAQ,KAEV,2BACGT,EAAMN,KADT,OACmBM,EAAME,eADzB,eAGA,kBAAC,IAAD,CACEE,UAAU,WACVG,MAAM,UACNC,UAAWR,EAAME,eACjBO,OAAQ,KAEV,oCAAUH,O,QCnCDI,MARf,WAA8B,IAAD,EACoBC,gLAAvCC,EADmB,EACnBA,SAAUC,EADS,EACTA,yBACD,gBAAbD,IACFE,IAAQC,WAAWF,GACnBC,IAAQE,SAAS,OCKDC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SAAS,WACxDf,OD2HI,kBAAmBgB,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAACC,GAClCA,EAAaC,iB","file":"static/js/main.98df24ef.chunk.js","sourcesContent":["import moment from 'moment';\n\nfunction getPercentage(args) {\n  if (args === undefined) {\n    throw new Error('\"args\" cannot be \"undefined\"');\n  }\n\n  const end = moment(args.end);\n  const start = moment(args.start);\n  const today = moment(args.today);\n\n  const elapsed = today.diff(start, 'days');\n  const total = end.diff(start, 'days');\n\n  return Math.round((elapsed / total) * 100);\n}\n\nexport default getPercentage;\n","import moment from 'moment';\n\nfunction getQuarter(input) {\n  const now = moment(input);\n  const month = now.month();\n  const year = now.year();\n\n  let first;\n  let last;\n  let text;\n  switch (month) {\n    case 0:\n    case 1:\n    case 2:\n      first = '01';\n      last = '03';\n      text = 'Q1';\n      break;\n    case 3:\n    case 4:\n    case 5:\n      first = '04';\n      last = '06';\n      text = 'Q2';\n      break;\n    case 6:\n    case 7:\n    case 8:\n      first = '07';\n      last = '09';\n      text = 'Q3';\n      break;\n    default:\n      first = '10';\n      last = '12';\n      text = 'Q4';\n      break;\n  }\n\n  const quarter = {\n    first: moment(`${year}-${first}-01`).format('YYYY-MM-DD'),\n    last: moment(`${year}-${last}-15`).endOf('month').format('YYYY-MM-DD'),\n    text,\n    year\n  };\n\n  return quarter;\n}\n\nexport default getQuarter;\n","import React from 'react';\nimport Progress from 'react-progressbar';\nimport { version } from '../package.json';\nimport './App.css';\nimport getPercentage from './getPercentage';\nimport getQuarter from './getQuarter';\n\nfunction App() {\n  const now = Date.now();\n  const quarter = getQuarter(now);\n  const model = {\n    percentage: getPercentage({\n      end: quarter.last,\n      start: quarter.first,\n      today: now\n    }),\n    year: quarter.year,\n    yearPercentage: getPercentage({\n      end: `${quarter.year}-12-31`,\n      start: `${quarter.year}-01-01`,\n      today: now\n    }),\n    yearQuarter: () => `${quarter.year}/${quarter.text}`\n  };\n\n  return (\n    <div className=\"App\" data-version={version}>\n      <h1>Progress Bar {model.yearQuarter()}</h1>\n      <p>\n        {model.yearQuarter()} is {model.percentage}% completed\n      </p>\n      <Progress\n        className=\"Progress\"\n        color=\"orange\"\n        completed={model.percentage}\n        height={20}\n      />\n      <p>\n        {model.year} is {model.yearPercentage}% completed\n      </p>\n      <Progress\n        className=\"Progress\"\n        color=\"#2B60DE\"\n        completed={model.yearPercentage}\n        height={15}\n      />\n      <footer>v{version}</footer>\n    </div>\n  );\n}\n\nexport default App;\n","import ReactGA from 'react-ga';\n\n// CREDIT: https://medium.com/google-cloud/tracking-site-visits-on-react-app-hosted-in-google-cloud-using-google-analytics-f49c2411d398\nfunction initializeReactGA() {\n  const { NODE_ENV, REACT_APP_GA_TRACKING_ID } = process.env;\n  if (NODE_ENV !== 'development') {\n    ReactGA.initialize(REACT_APP_GA_TRACKING_ID);\n    ReactGA.pageview('/');\n  }\n}\n\nexport default initializeReactGA;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport initializeReactGA from './initializeReactGA';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'), () => {\n  initializeReactGA();\n});\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}